apply plugin: 'com.android.application'
apply plugin: 'com.zdd.plugindemo'
apply from:'packageplugin.gradle'

buildscript {
    repositories {
        maven {
            //plugin这里是发布在本地文件夹了
            url uri('../repo')
        }
    }
    dependencies {
        //testplugin
        classpath 'com.zdd.plugindemo:testplugin:1.0'
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        flavorDimensions rootProject.ext.android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        signRelease {
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }

        signDebug {
            storeFile file(rootProject.ext.signConfigs.storeFile)
            storePassword rootProject.ext.signConfigs.storePassword
            keyAlias rootProject.ext.signConfigs.keyAlias
            keyPassword rootProject.ext.signConfigs.keyPassword
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.java.javaVersion
        targetCompatibility rootProject.ext.java.javaVersion
    }

    def DEBUG_BASE_URL = "\"http://192.168.1.161:8191/openapi/\""


    //***所有的打包变量应该在这边配置
    productFlavors {
        develop {
            //applicaitonId只有在productFlavors中可以配置
            applicationId rootProject.ext.android.applicationId
            manifestPlaceholders=[APP_NAME:"开-GradleDemo"]
            buildConfigField("boolean","LOG_DEBUG","true")
            buildConfigField("String","API_HOST",DEBUG_BASE_URL)
        }
        check {
            applicationId rootProject.ext.android.applicationId
            manifestPlaceholders=[APP_NAME:"测-GradleDemo"]
            buildConfigField("boolean","LOG_DEBUG","true")
            buildConfigField("String","API_HOST",DEBUG_BASE_URL)
        }

        product{
            applicationId rootProject.ext.android.applicationId
            manifestPlaceholders=[APP_NAME:"GradleDemo"]
            buildConfigField("boolean","LOG_DEBUG","false")
            buildConfigField("String","API_HOST",DEBUG_BASE_URL)
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.signDebug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            signingConfig signingConfigs.signRelease
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }


    }

    sourceSets{
        main{
            jniLibs .srcDirs=['libs'] //修改so库存放位置

            res.srcDirs=['src/main/res',
                         'src/main/res-ad',
                         'src/main/res-player'] //资源分模块存放
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.ext.dependence.libSupportV7
    implementation rootProject.ext.dependence.libConstraint
    testImplementation rootProject.ext.dependence.libJunit
    androidTestImplementation rootProject.ext.dependence.libTestRunner
    androidTestImplementation rootProject.ext.dependence.libTestEspresso

    implementation project(':mylibrary')
}

println "this is test--"+getRootProject().getRootDir().path

//文件拷贝以后要手动刷新一下,才会再列表中显示;只支持同一个工程中操作
copy{
    from file('build/outputs/apk/')
    into getRootProject().getRootDir().path+'/output/apk/'
    exclude{}
    rename{}
}

//文件树遍历
fileTree('build/outputs/apk/'){FileTree fileTree->
    fileTree.visit {FileTreeElement element->
        println 'the file name is:'+element.file.name
        copy{
            from element.file
            into getRootProject().getRootDir().path+'/output/test/'
        }

    }
}

//直接通过task函数去创建,执行window底下直接gredlew helloTask
task helloTask(group:'zdd',description:'task study'){
    println 'I am helloTask'

    doFirst{
        println 'the task group is:'+group
    }

    //gradle默认的task

    doLast{
        println 'the task description is:'+description
    }
}

//通过TaskContainer去创建Task
this.tasks.create(name:'helloTask2'){
    setGroup('zdd')
    setDescription('task study')
    println 'I am helloTask2'
}

//计算build执行时长
def startBuildTime,endBuildTime

//配置后task才能被找到
this.afterEvaluate { Project project->
    def preBuildTask=project.tasks.getByName('preBuild')
    preBuildTask.doFirst {
        startBuildTime=System.currentTimeMillis()
        println 'the start time is:'+startBuildTime

    }

    def buildTask=project.tasks.getByName('build')
    buildTask.doLast {
        endBuildTime=System.currentTimeMillis()
        println "the build time is:${endBuildTime-startBuildTime}"
    }

}

//修改最终输出文件的名字，在application中输出就是apk,在library中输出就是aar
this.afterEvaluate {
    this.android.applicationVariants.all{ variant->
        def output=variant.outputs.first()
        def apkName="app-${variant.baseName}"+"-${variant.versionName}.apk"

        output.outputFileName=apkName
        println output.outputFile.name

    }

}


//如何通过变体获取相关的task，变体是android中重要的概念，只有通过变体才能获取到task
this.afterEvaluate {
    this.android.applicationVariants.all{ variant->
        def task=variant.checkManifest  //比较靠前的任务
        println task.name

        task.doFirst{
            println "执行manifest之前"
        }

        task.doLast{
            println "执行manifest之后"
        }
    }

}

/**
 * 为自定义插件传递参数
 */
nlpReleaseInfo {
    versionCode = rootProject.ext.android.versionCode
    versionName = rootProject.ext.android.versionName
    versionInfo = '第8个版本。。。'
    fileDirs = '/release/'
    fileName = 'releases.xml'
}